/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as appRouteImport } from './routes/(app)/route'
import { Route as IndexImport } from './routes/index'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as appHelpImport } from './routes/(app)/help'
import { Route as appDashboardImport } from './routes/(app)/dashboard'
import { Route as appAboutImport } from './routes/(app)/about'

// Create/Update Routes

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const appRouteRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

const appHelpRoute = appHelpImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => appRouteRoute,
} as any)

const appDashboardRoute = appDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => appRouteRoute,
} as any)

const appAboutRoute = appAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => appRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(app)/about': {
      id: '/(app)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof appAboutImport
      parentRoute: typeof appRouteImport
    }
    '/(app)/dashboard': {
      id: '/(app)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardImport
      parentRoute: typeof appRouteImport
    }
    '/(app)/help': {
      id: '/(app)/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof appHelpImport
      parentRoute: typeof appRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof authRouteImport
    }
  }
}

// Create and export the route tree

interface appRouteRouteChildren {
  appAboutRoute: typeof appAboutRoute
  appDashboardRoute: typeof appDashboardRoute
  appHelpRoute: typeof appHelpRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appAboutRoute: appAboutRoute,
  appDashboardRoute: appDashboardRoute,
  appHelpRoute: appHelpRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/about': typeof appAboutRoute
  '/dashboard': typeof appDashboardRoute
  '/help': typeof appHelpRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/about': typeof appAboutRoute
  '/dashboard': typeof appDashboardRoute
  '/help': typeof appHelpRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/(app)/about': typeof appAboutRoute
  '/(app)/dashboard': typeof appDashboardRoute
  '/(app)/help': typeof appHelpRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/dashboard' | '/help' | '/login' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/dashboard' | '/help' | '/login' | '/register'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(auth)'
    | '/(app)/about'
    | '/(app)/dashboard'
    | '/(app)/help'
    | '/(auth)/login'
    | '/(auth)/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)",
        "/(auth)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(app)": {
      "filePath": "(app)/route.tsx",
      "children": [
        "/(app)/about",
        "/(app)/dashboard",
        "/(app)/help"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/(app)/about": {
      "filePath": "(app)/about.tsx",
      "parent": "/(app)"
    },
    "/(app)/dashboard": {
      "filePath": "(app)/dashboard.tsx",
      "parent": "/(app)"
    },
    "/(app)/help": {
      "filePath": "(app)/help.tsx",
      "parent": "/(app)"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx",
      "parent": "/(auth)"
    }
  }
}
ROUTE_MANIFEST_END */
